ALLWAYS FOLLOW THIS STYLE  GUIDE

STYLE GUIDE:

### Testing
- Add or improve unit tests for all modules (`Tests/`, `*_test.go`).
- Cover all edge cases and error paths.
- TypeScript: Use `vitest` or `jest`.
- Go: Use the standard `testing` package with `t.Helper()` where needed.



### Mathematics
- Comment all mathematical logic with clear symbolic formulas and equations.
- Show full solutions, derivations, and reasoning behind formulas.
- Explanations must be clear and easy to understand.



### Performance
- **C++:** Use `const`, references, `std::move`, and `emplace` where appropriate.
- Avoid unnecessary copies, allocations, and heap usage when stack allocation suffices.
- **TS:** Avoid redundant object cloning, prefer immutable patterns, minimize expensive operations.
- **Go:** Avoid redundant slice/map copies, preallocate where possible, use pointers only when needed.



### Documentation
- **C++:** Use Doxygen style for all public APIs.
- **TS:** Use JSDoc for all public functions/interfaces.
- **Go:** Use Godoc for all exported functions.
- Maintain strict separation of interface and implementation (`.h` vs `.cpp`, interface vs implementation, exported vs private).



### Naming & Style
- Apply idiomatic naming conventions:
  - C++: `PascalCase` for classes, `snake_case` for variables/functions.
  - TS: `camelCase` for functions/variables, `PascalCase` for classes/types.
  - Go: `MixedCaps` for exported names, lowercase for unexported.
- No magic numbers â€” use named constants or enums.
- Always use clear, descriptive names (no cryptic single letters outside of small loops).



### Error Handling
- **C++:** Use `std::expected` or exceptions with clear messages; never silently fail.
- **TS:** Use `try/catch` with typed errors or `Result` objects.
- **Go:** Always check `err` and return actionable error messages.
- Ensure all errors are explicit and human-readable.
- NEVER USE EXCEPTIONS ! ONLY ERRORS AS VALUES!!


### Modular Structure
- Split each logical component (e.g., `indexer`, `manager`, `audit`) into its own module/file.
- Avoid monolithic or spaghetti-style code.
- Ensure clear architectural layering with no circular imports.



### Comments
- Every class, function, and major logic block must have clear, concise, professional comments.
- Comments must explain **why**, not just **what**.
- Algorithmic and mathematical sections must include formulas, derivations, and reasoning.
- Follow Doxygen style comments **DO NOT EXPLAIN SYNTAX**
- In the most difficult parts of the code documentation comments should be in Japanese writen in **Japanese FEMALE** tone **USE JAPANESE KAOMOJI** otherwise use english



### General
- Write clean, modern, idiomatic code in each language.
- Prefer pure functions and avoid side effects unless necessary.
- Readability and maintainability are top priorities.
